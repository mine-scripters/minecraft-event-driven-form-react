// Generated by dts-bundle-generator v9.5.1

import { EventReceiver, FormHub, StringResolvable } from '@mine-scripters/minecraft-event-driven-form-base';
import React$1 from 'react';

export interface MinecraftEventDrivenFormProps {
	formHub: FormHub;
	receiver?: EventReceiver;
	onFinished?: () => void;
	ref?: React$1.RefObject<MinecraftEventDrivenFormControl | null>;
	children: React$1.ReactNode | ((props: MinecraftEventDrivenFormControl) => React$1.ReactNode);
}
export interface MinecraftEventDrivenFormControl {
	reset: () => void;
	args: Record<string, StringResolvable>;
}
export declare const MinecraftEventDrivenForm: React$1.FunctionComponent<MinecraftEventDrivenFormProps>;
export type MinecraftButtonProps = Omit<React$1.ButtonHTMLAttributes<HTMLButtonElement>, "type">;
export declare const MinecraftButton: React$1.FunctionComponent<MinecraftButtonProps>;
export interface MinecraftFormProps {
	title: string | React$1.ReactNode;
	onClose?: () => void;
}
export declare const MinecraftForm: React$1.FunctionComponent<React$1.PropsWithChildren<MinecraftFormProps>>;
export interface MinecraftInputTextProps {
	label: string | React$1.ReactNode;
	name: string;
	value: string;
	placeholder: string;
	onChange?: (event: React$1.ChangeEvent<HTMLInputElement>) => void;
}
export declare const MinecraftInputText: React$1.FunctionComponent<MinecraftInputTextProps>;
export interface MinecraftInputToggleProps {
	label: string | React$1.ReactNode;
	name: string;
	isChecked?: boolean;
	onChange?: (event: React$1.ChangeEvent<HTMLInputElement>) => void;
}
export declare const MinecraftInputToggle: React$1.FunctionComponent<MinecraftInputToggleProps>;
export interface MinecraftInputDropdownProps {
	label: string | React$1.ReactNode;
	name: string;
	value: string | number;
	onChange?: (event: React$1.ChangeEvent<HTMLSelectElement>) => void;
}
export declare const MinecraftInputDropdown: React$1.FunctionComponent<React$1.PropsWithChildren<MinecraftInputDropdownProps>>;
export interface MinecraftInputDropdownItemProps {
	value: string | number;
	children: string;
}
export declare const MinecraftInputDropdownItem: React$1.FunctionComponent<MinecraftInputDropdownItemProps>;
export interface MinecraftInputSliderProps {
	label: string | React$1.ReactNode;
	name: string;
	value: number;
	min: number;
	max: number;
	step: number;
	onChange?: (event: React$1.ChangeEvent<HTMLInputElement>) => void;
}
export declare const MinecraftInputSlider: React$1.FunctionComponent<MinecraftInputSliderProps>;
export interface MinecraftLabelProps {
	children: string | React$1.ReactNode;
}
export declare const MinecraftLabel: React$1.FunctionComponent<MinecraftLabelProps>;

export {};
