// Generated by dts-bundle-generator v9.5.1

import React$1 from 'react';

export interface Translate {
	translate: string;
	args?: Array<TextContent>;
}
export type TextContent = string | Translate | Array<TextContent>;
export type NormalizedTextContent = {
	type: "translate";
	translate: string;
	args?: Array<string> | Array<NormalizedTextContent>;
} | {
	type: "text";
	text: string;
} | {
	type: "array";
	array: Array<NormalizedTextContent>;
};
export interface FormAction {
	form?: string;
	event?: string;
	eventArgs?: Array<unknown>;
	copyArgs?: boolean;
}
export interface DualButtonForm {
	type: "dual-button";
	title: TextContent;
	body?: TextContent;
	topButton: DualButtonElementButton;
	bottomButton: DualButtonElementButton;
}
export interface DualButtonElementButton {
	type: "button";
	text: TextContent;
	action?: FormAction;
}
export interface InputForm {
	type: "input";
	title: TextContent;
	submit?: TextContent;
	elements: Array<InputElement>;
	action?: FormAction;
}
export type InputValue = string | number | boolean;
export type InputElement = InputElementSlider | InputElementDropdown | InputElementText | InputElementToggle;
export type InputElementSlider = {
	type: "slider";
	name?: string;
	text: TextContent;
	min: number;
	max: number;
	step: number;
	defaultValue?: number;
};
export type InputElementDropdown = {
	type: "dropdown";
	name?: string;
	text: TextContent;
	defaultValue?: InputValue;
	options: Array<{
		text: TextContent;
		value: InputValue;
	}>;
};
export type InputElementText = {
	type: "text";
	name?: string;
	text: TextContent;
	placeholder: TextContent;
	defaultValue?: string;
};
export type InputElementToggle = {
	type: "toggle";
	name?: string;
	text: TextContent;
	defaultValue?: boolean;
};
export interface MultiButtonForm {
	type: "multi-button";
	title: TextContent;
	body?: TextContent;
	elements: Array<MultiButtonElement>;
}
export type MultiButtonElement = MultiButtonElementButton;
export interface MultiButtonElementButton {
	type: "button";
	text: TextContent;
	icon?: string;
	action?: FormAction;
}
export type Form = MultiButtonForm | InputForm | DualButtonForm;
/**
 * @inline
 */
export interface ToString {
	toString(): string;
}
/**
 * @inline
 */
export type StringResolvableMap = {
	[key: string]: StringResolvable;
};
export type StringResolvable = ToString | StringResolvableMap;
declare class FormArguments {
	private _args;
	set(name: string, arg: StringResolvable): void;
	setAll(args: Record<string, StringResolvable>): void;
	getAll(): Record<string, StringResolvable>;
	get<Arg extends StringResolvable>(name: string): Arg;
	resolvePath(path: string): string;
	resolveTemplate(template: string): string;
	normalize(content: TextContent): NormalizedTextContent;
}
export interface FormHub {
	entrypoint: string;
	forms: Record<string, Form>;
}
declare class FormEvent {
	protected _form: Form | undefined;
	protected _name: string | undefined;
	protected _continueProcessing: boolean;
	protected readonly _hub: FormHub;
	protected _args: FormArguments;
	protected _eventArgs: Array<unknown>;
	constructor(hub: FormHub, action?: FormAction, previousArgs?: FormArguments);
	loadForm(name: string): Form;
	loadForm(name: string, type: "multi-button"): MultiButtonForm;
	loadForm(name: string, type: "input"): InputForm;
	loadForm(name: string, type: "dual-button"): InputForm;
	set form(form: Form | undefined);
	get form(): Form | undefined;
	get name(): string | undefined;
	get args(): FormArguments;
	get eventArgs(): unknown[];
	get continueProcessing(): boolean;
	cancelProcessing(): void;
}
/**
 * @inline
 */
export type EventReceiverFunction = (event: FormEvent) => Promise<void>;
/**
 * @inline
 */
export type EventReceiverMap = Record<string, EventReceiverFunction>;
export type EventReceiver = EventReceiverFunction | EventReceiverMap | undefined;
export interface MinecraftEventDrivenFormProps {
	formHub: FormHub;
	receiver?: EventReceiver;
	onFinished?: () => void;
	ref?: React$1.RefObject<MinecraftEventDrivenFormControl | null>;
	children: React$1.ReactNode | ((props: MinecraftEventDrivenFormControl) => React$1.ReactNode);
}
export interface MinecraftEventDrivenFormControl {
	reset: () => void;
	args: Record<string, StringResolvable>;
}
export declare const MinecraftEventDrivenForm: React$1.FunctionComponent<MinecraftEventDrivenFormProps>;
export type MinecraftButtonProps = Omit<React$1.ButtonHTMLAttributes<HTMLButtonElement>, "type">;
export declare const MinecraftButton: React$1.FunctionComponent<MinecraftButtonProps>;
export interface MinecraftFormProps {
	title: string | React$1.ReactNode;
	onClose?: () => void;
}
export declare const MinecraftForm: React$1.FunctionComponent<React$1.PropsWithChildren<MinecraftFormProps>>;
export interface MinecraftInputTextProps {
	label: string | React$1.ReactNode;
	name: string;
	value: string;
	placeholder: string;
	onChange?: (event: React$1.ChangeEvent<HTMLInputElement>) => void;
}
export declare const MinecraftInputText: React$1.FunctionComponent<MinecraftInputTextProps>;
export interface MinecraftInputToggleProps {
	label: string | React$1.ReactNode;
	name: string;
	isChecked?: boolean;
	onChange?: (event: React$1.ChangeEvent<HTMLInputElement>) => void;
}
export declare const MinecraftInputToggle: React$1.FunctionComponent<MinecraftInputToggleProps>;
export interface MinecraftInputDropdownProps {
	label: string | React$1.ReactNode;
	name: string;
	value: string | number;
	onChange?: (event: React$1.ChangeEvent<HTMLSelectElement>) => void;
}
export declare const MinecraftInputDropdown: React$1.FunctionComponent<React$1.PropsWithChildren<MinecraftInputDropdownProps>>;
export interface MinecraftInputDropdownItemProps {
	value: string | number;
	children: string;
}
export declare const MinecraftInputDropdownItem: React$1.FunctionComponent<MinecraftInputDropdownItemProps>;
export interface MinecraftInputSliderProps {
	label: string | React$1.ReactNode;
	name: string;
	value: number;
	min: number;
	max: number;
	step: number;
	onChange?: (event: React$1.ChangeEvent<HTMLInputElement>) => void;
}
export declare const MinecraftInputSlider: React$1.FunctionComponent<MinecraftInputSliderProps>;
export interface MinecraftLabelProps {
	children: string | React$1.ReactNode;
}
export declare const MinecraftLabel: React$1.FunctionComponent<MinecraftLabelProps>;

export {};
